---
## NOK too many dependencies
#- name: download wixl for windows agent packaging
#  get_url: url=http://ftp.gnome.org/pub/GNOME/sources/msitools/0.95/msitools-0.95.tar.xz dest=/root/msitools-0.95.tar.xz

## Note: might be affected if default system umask is not 022...
## in some environment, user install seems needed
- name: install gem fpm for agent packaging - system
  gem: name=fpm state=present user_install=no
- name: install gem fpm for agent packaging - user
  gem: name=fpm state=present user_install=yes
  become: yes
  become_user: "{{ mig_user }}"

## FIXME! travis not getting fpm...
- command: "which fpm"
  environment:
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/usr/local/go/bin:$HOME/.gem/ruby/1.9.1/bin"
  register: whichfpm
  changed_when: false
  ignore_errors: true
- debug: var=whichfpm
- command: "env"
  register: env
  changed_when: false
- debug: var=env

- name: Set Agent configuration - mig-agent.cfg
#  template: src=mig-agent-conf.go dest={{ mig_home }}/mig/conf/mig-agent-conf.go owner={{ mig_user }}
  command: "rsync -ci {{ mig_src }}/conf/mig-agent.cfg.inc {{ mig_src }}/conf/mig-agent.cfg"
  register: rsync_result
  changed_when: 'rsync_result.stdout != ""'
  become: yes
  become_user: "{{ mig_user }}"
- name: update agent configuration - mig-agent.cfg
  replace: dest="{{ mig_src }}/conf/mig-agent.cfg" regexp="{{ item.re }}" replace="{{ item.rep }}"
#  replace: dest="{{ mig_src }}/conf/mig-agent.cfg.inc" regexp="{{ item.re }}" replace="{{ item.rep }}"
  with_items:
    - { re: 'api             = ".*"$', rep: 'api             = "http://{{ mig_api_host }}:{{ mig_api_port }}/api/v1/"' }
    - { re: '   ca  = "/path/to/ca/cert"', rep: '   ca  = "/etc/mig/ca.crt"' }
    - { re: 'cert= "/path/to/client/cert"', rep: "cert= \"{{ mig_rabbitmq_clientdir }}/agent.crt\"" }
    - { re: 'key = "/path/to/private/key"', rep: "key = \"{{ mig_rabbitmq_clientdir }}/agent.key\"" }
    - { re: 'relay            = "amqp://.*"$', rep: "relay            = \"amqp://agent:{{ mig_rabbitmq_agentpass }}@{{ mig_rabbitmq_host }}:{{ mig_rabbitmq_port }}/{{ mig_rabbitmq_vhost }}\"" }


- stat: path={{ mig_rabbitmq_clientdir+'/agent.crt' }}
  register: agentcrt
- name: read agent.crt
  command: "cat {{ mig_rabbitmq_clientdir+'/agent.crt' }}"
  changed_when: false
  register: mig_rabbitmq_clientagentcrt
- name: read agent.key
  command: "cat {{ mig_rabbitmq_clientdir+'/agent.key' }}"
  changed_when: false
  register: mig_rabbitmq_clientagentkey
- name: read agent.key
  command: "cat {{ mig_rabbitmq_cacertcrt }}"
  changed_when: false
  register: mig_rabbitmq_cacertcrtval
- debug: var=mig_rabbitmq_clientagentcrt
#- debug: var=mig_rabbitmq_cacertcrtval
#- debug: var=test
#- debug: var=mig_client_investigators2
#- debug: var=mig_client_investigators
- name: Set Agent configuration - mig-agent-conf.go
  template: src=mig-agent-conf.go.j2 dest="{{ mig_src }}/conf/mig-agent-conf.go" mode=0644 backup=yes
  register: agentconfstatus
#- debug: var=agentconfstatus
- name: remove existing package if configuration has changed
  shell: "rm {{ mig_src }}/mig-agent_*.deb {{ mig_src }}/mig-agent-*.rpm"
## FIXME! fileglob without result
#  file: dest="{{ item }}" state=absent
#  with_fileglob:
#    - "{{ mig_src }}/mig-agent_*.deb"
#    - "{{ mig_src }}/mig-agent-*.rpm"
  when: agentconfstatus.changed
  ignore_errors: true

- name: fix travis path issue
  replace: dest="{{ mig_src }}/Makefile" regexp="(\s+)fpm " replace="\1/usr/local/bin/fpm "

- name: check fpm permissions
  file: dest=/usr/local/bin/fpm state=file mode=0755
- name: check if already debian mig-agent package
  shell: "ls {{ mig_src }}/mig-agent_*.deb | grep -v latest"
  register: migagentpkg1
  changed_when: False
  ignore_errors: true
#- debug: var=migagentpkg1
- name: Build MIG platform agent packages - deb
  command: "make deb-agent chdir={{ mig_src }}"
  environment:
#    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/usr/local/go/bin"
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/usr/local/go/bin:$HOME/.gem/ruby/1.9.1/bin"
    GOPATH: "{{ mig_gopath }}"
    BUILDENV: prod
  become: yes
  become_user: "{{ mig_user }}"
  when: migagentpkg1.rc != 0 or migagentpkg1.stdout == ''
  ignore_errors: true
- name: get current name of debian mig-agent package
  shell: "ls -Art {{ mig_src }}/mig-agent_*.deb | grep -v latest | tail -1"
  register: migagentpkg1b
  changed_when: False
#- debug: var=migagentpkg1b
- name: create symlink latest for debian mig-agent package
  file: "src={{ migagentpkg1b.stdout }} dest={{ mig_src }}/mig-agent_latest-{{ ansible_architecture }}.deb state=link"

- name: check if already rpm mig-agent package
  shell: "ls {{ mig_src }}/mig-agent-*.rpm | grep -v latest"
  register: migagentpkg2
  changed_when: False
  ignore_errors: true
- name: Build MIG platform agent packages - rpm
  command: "make rpm-agent chdir={{ mig_src }}"
  environment:
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/usr/local/go/bin"
    GOPATH: "{{ mig_gopath }}"
    BUILDENV: prod
  become: yes
  become_user: "{{ mig_user }}"
  when: migagentpkg2.rc != 0 or migagentpkg2.stdout == ''
  ignore_errors: true
#    - "make dmg-agent"     ## only on MacOS
#    - "make msi-agent"     ## Need wixl/no package before wily
- name: get current name of rpm mig-agent package
  shell: "ls -Art {{ mig_src }}/mig-agent-*.rpm | grep -v latest | tail -1"
  register: migagentpkg2b
  changed_when: False
#- debug: var=migagentpkg2b
- name: create symlink latest for rpm mig-agent package
  file: "src={{ migagentpkg2b.stdout }} dest={{ mig_src }}/mig-agent-latest-{{ ansible_architecture }}.rpm state=link"

#- stat: path="{{ mig_src }}/bin/linux/amd64/mig-agent-latest.exe"
#  register: migagentbin2
### FIXME! fails silently, dependencies missing
#- name: Build MIG platform cross-platform agent - windows
##  command: "make mig-agent msi-agent chdir={{ mig_src }}"
#  command: "make mig-agent chdir={{ mig_src }}"
#  environment:
#    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/usr/local/go/bin"
#    GOPATH: "{{ mig_gopath }}"
#    BUILDENV: prod
#    OS: windows
#    ARCH: amd64
#  become: yes
#  become_user: "{{ mig_user }}"
#  when: not migagentbin2.stat.exists

#- name: retrieve mig-agent to deploy? what about libraries? (vdso, pthread, c)
#  fetch: src="{{ mig_src }}/bin/linux/amd64/mig-agent-latest" dest=migagent flat=yes

